#!/usr/bin/env bash
# provides a line count with some pretty bars if the -b option is supplied
# verbose mode with -v
# -p give path
# 'show search' mode with -s
# optargs planned - todo


searchpath="."

usebars=1
verbose=0
verbshort=0
showsearch=0


# function usage()
# {
#     echo "if this was a real script you would see something useful here"
#     echo ""
#     echo "./simple_args_parsing.sh"
#     echo "\t-h --help"
#     echo "\t--environment=$ENVIRONMENT"
#     echo "\t--db-path=$DB_PATH"
#     echo ""
# }
#
#
#
# searchpath="."
#
# usebars=0
# verbose=0
# verbshort=0
# showsearch=0
#
# while [ "$1" != "" ]; do
#     PARAM=`echo $1 | awk -F= '{print $1}'`
#     VALUE=`echo $1 | sed 's/^[^=]*=//g'`
# #    VALUE=`echo $1 | awk -F= '{print $2}'`
#     case $PARAM in
#         -h | --help)
#             usage
#             exit
#             ;;
#         -v | --verbose )
#             verbose=1
#             ;;
#         -c | --short-verbose)
#             verbose=1
#             verbshort=1
#             ;;
#         -s | --showsearch)
#             showsearch=1
#             ;;
#         -b | --bars)
#             usebars=1
#             ;;
#         -p | --path)
#             searchpath=$VALUE
#             ;; 
#         *)
#             echo "ERROR: unknown parameter \"$PARAM\""
#             usage
#             exit 1
#             ;;
#     esac
#     shift
# done


# Spacing UI Vars
linesgap=7
filegap=17
pctgap=26
verbgap=7
sepchar=""

declare -a filetypes=( .py .m .vim .sh .c .cpp .ino .hs .lhs .tex .md .html .css .php .js )
declare -a linecounts=()
declare -a filecounts=()

cumsumfiles=0
for filetype in "${filetypes[@]}"; do
    if [ $showsearch -eq 1 ]; then
        echo -e "Locating $filetype"
    fi

    # clean file list
    files=$(find $searchpath 2>&1 | grep "\\$filetype$" | grep -v "denied" | grep -v "No such" | grep -v "undodir")
    
    linesum=0
    filesum=0
    if [ ${#files} -ge 1 ]; then
        while read -r line; do
            cumsumfiles=$(($cumsumfiles+1))
            filesum=$(($filesum+1))
    
            if [ -f "$line" ]; then # FILES ONLY - we dont' want directories like .vim

                # line sum
                out=`wc -l "$line"`
                out=`echo $out | cut -f1 -d ' ' `
                if  [[ $out > 0 ]]; then
                    linesum=$(($linesum+$out))
                fi

                ### BEGIN VERBOSE MODE CODE
                if [ $verbose -eq 1 ]; then
                    nspaces=$(( $verbgap - ${#out} ))
                    if [ $nspaces -le 0 ]; then nspaces=1; fi 
                    outstr="$out"
                    outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
                    if [ $verbshort -eq 1 ]; then
                        outstr+="$sepchar $(basename "$line")"
                    else
                        outstr+="$sepchar $line"
                    fi 
                    echo "$outstr"
                fi
                ### END VERBOSE MODE CODE
            fi

        done <<< "$files"
    fi
    linecounts+=( $linesum )
    filecounts+=( $filesum )
done

# add a nice little gap when in verbose mode
if [ $verbose -eq 1 ]; then
    echo -e "\n\n"
fi

# get some important variables
xwidth=$(tput cols)
maxcount=${linecounts[0]}
cumsumlines=${linecounts[0]}
for n in "${linecounts[@]}"; do
    ((n > maxcount)) && maxcount=$n
    cumsumlines=$(($n + $cumsumlines))
done


### BEGIN TITLE
# file ext
nspaces=$((  $linesgap  -  3  ))
outstr="Ext"

# line count
if [ $nspaces -le 0 ]; then nspaces=1; fi 
outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
outstr+="$sepchar Lines"

# file count 
nspaces=$((  $filegap  -  ${#outstr}  ))
if [ $nspaces -le 0 ]; then nspaces=1; fi 
outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
outstr+="$sepchar Files"

# percentage
nspaces=$((  $pctgap  -  ${#outstr}  ))
if [ $nspaces -le 0 ]; then nspaces=1; fi 
outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
outstr+="$sepchar Line Percentage"

nspaces=$((  $xwidth  -  ${#outstr}  ))
if [ $nspaces -le 0 ]; then nspaces=1; fi 
outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)

echo -e "\e[4m$outstr\e[0m"
### END TITLE


for i in ${!filetypes[*]}; do
    if [[ ${linecounts[$i]} -ne 0 ]]; then
        # file ext
        nspaces=$((  $linesgap  -  $(echo -n ${filetypes[$i]} | wc -c)   ))
        outstr="${filetypes[$i]}"

        # line count
        if [ $nspaces -le 0 ]; then nspaces=1; fi 
        outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
        outstr+="$sepchar ${linecounts[$i]}"

        # file count 
        nspaces=$((  $filegap  -  ${#outstr}  ))
        if [ $nspaces -le 0 ]; then nspaces=1; fi 
        outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
        outstr+="$sepchar ${filecounts[$i]}"

        # percentage
        pct=$( bc <<< "scale=2; 100 * ${linecounts[$i]} / $cumsumlines ")
        nspaces=$((  $pctgap  -  ${#outstr}  ))
        if [ $nspaces -le 0 ]; then nspaces=1; fi 
        outstr+=$(for ((i=1; i<=$nspaces; i++)); do echo -n ' '; done)
        outstr+="$sepchar ($pct%)"

        echo "$outstr"

        ### BEGIN BAR UI CODE
        if [ $usebars -eq 1 ]; then
            numbar=$(echo $(($xwidth * ${linecounts[$i]} / $maxcount)) | awk '{print int($1+0.5)}')
            # TODO add fractional bars - this is currently a bad hack
            bar=$(for ((i=1; i<=$numbar; i++)); do echo -n '█'; done)
            if [ $numbar -le 0 ]; then bar="▍"; fi
            echo "$bar"
        fi
        ### END BAR UI CODE
    fi
done
echo -e "\n\e[1m$cumsumlines Total Lines in $cumsumfiles Files"


# Copyright (C) William Matthews 2019
